"master's degree"))
SP.noNA$Lunch <- factor(SP.noNA$Lunch)
SP.noNA$TestPrep <- factor(SP.noNA$TestPrep)
h1 <- ggplot(data = SP.noNA, aes(x = Writing)) +
geom_histogram(bins = 10, colour = 1, fill = "white") +
xlab("Writing Exam Scores") + geom_density()
b1 <- ggplot(SP.noNA, aes(x=Writing, y="")) +
geom_boxplot() +
xlab("Writing Exam Scores") +
ylab("")
h2 <- ggplot(data = SP.noNA, aes(x = Math)) +
geom_histogram(bins = 10, colour = 1, fill = "white") +
xlab("Math Exam Scores") + geom_density()
b2 <- ggplot(SP.noNA, aes(x=Math, y="")) +
geom_boxplot() +
xlab("Math Exam Scores") +
ylab("")
ggarrange(ncol = 2, nrow = 2, h1, h2, b1, b2)
ggpairs(SP.noNA, columns = 6:8)
ggpairs(SP.noNA, columns = 6:8, aes(color = Lunch))
ggpairs(SP.noNA, columns = 6:8, aes(color = TestPrep))
###################### make sure to use the object SP.noNA and name the regression lm.out1 so the code we provide
###################### in problems 4a, 4b and 5b runs.
lm.out1 <- lm(Math~Reading, data= SP.noNA)
summary(lm.out1)
S1 <- ggplot(SP.noNA, aes(x=Math, y=Reading)) +
geom_point(size=2, shape=23) +
geom_abline(intercept = 7.41432 , slope = 0.854498 ,
color = "blue", linewidth = 1) +
xlab("Math Score") + ylab("Reading Score")
S1
# Create residual plot
ggplot(lm.out1, aes(x = fitted(lm.out1),
y = residuals(lm.out1))) +
geom_point() +
geom_hline(yintercept = 0,color = "darkgray") +
xlab("Regression Fitted Values") + ylab("Model Residuals")
# Create histogram of the residuals
rp2 <-ggplot(lm.out1, aes(x = residuals(lm.out1))) +
geom_histogram(bins = 15, color = "blue", fill = "gray") +
xlab("Model Residuals")
# creat normal QQ plot
rp3 <- ggplot(lm.out1, mapping = aes(sample = residuals(lm.out1))) +
stat_qq_band() + stat_qq_point() + stat_qq_line() +
xlab("Theoretical Quantiles") + ylab("Sample Quantiles")
ggarrange(ncol = 2, nrow = 1, rp2, rp3)
SP.noNA$Lunch <- factor(SP.noNA$TestPrep, levels = c("completed", "none"))
# Run the new regression and print the summary
lm.out2 <- lm(Reading ~ Math + TestPrep, data = SP.noNA)
summary(lm.out2)
#
# The summary gives an intercept of 20.60, which is the estimated intercept
# for a fitted line for students who completed a test prep course. Combine this with the slope
# to get the regression line for students who completed a test prep course.
# The coefficient for TestPrepnone, -3.88, is the difference
# in the intercept between the students who took a test prep course and those that
# did not. To get the intercept for students who did not take a test prep course, add
# TestPrepnone to Intercept. Then combine with the slope to get the equation for the second line.
ggplot(SP.noNA, aes(x=Math, y=Reading, color = TestPrep)) +
geom_point(size=2, shape=23) +
geom_abline(intercept = lm.out1$coef[1], slope = lm.out1$coef[2],
color = "blue", size = 1) +
geom_abline(intercept = (lm.out2$coef[1]+lm.out2$coef[3]),
slope = lm.out2$coef[2],
color = "cyan2", linetype = "dashed", size = 1) +
geom_abline(intercept = lm.out2$coef[1], slope = lm.out2$coef[2],
color = "salmon", linetype = "dashed", size = 1) +
xlab("Math Score") + ylab("Reading Score")
ggplot(SP.noNA, aes(x=Math, y=Reading, color = TestPrep)) +
geom_point(size=2, shape=23) +
geom_abline(intercept = lm.out1$coef[1], slope = lm.out1$coef[2],
color = "blue", linewidth = 1) +
geom_abline(intercept = (lm.out2$coef[1]+lm.out2$coef[3]),
slope = lm.out2$coef[2],
color = "cyan2", linetype = "dashed", linewidth = 1) +
geom_abline(intercept = lm.out2$coef[1], slope = lm.out2$coef[2],
color = "salmon", linetype = "dashed", linewidth = 1) +
xlab("Math Score") + ylab("Reading Score")
ggplot(SP.noNA, aes(x=Math, y=Reading, color = TestPrep)) +
geom_point(size=2, shape=23) +
geom_abline(intercept = lm.out1$coef[1], slope = lm.out1$coef[2],
color = "blue", linewidth = 1) +
summary(lm.out1$coef[1])
ggplot(SP.noNA, aes(x=Math, y=Reading, color = TestPrep)) +
geom_point(size=2, shape=23) +
geom_abline(intercept = lm.out1$coef[1], slope = lm.out1$coef[2],
color = "blue", linewidth = 1) +
summary(lm.out1$coef)
ggplot(SP.noNA, aes(x=Math, y=Reading, color = TestPrep)) +
geom_point(size=2, shape=23) +
geom_abline(intercept = lm.out1$coef[1], slope = lm.out1$coef[2],
color = "blue", linewidth = 1) +
geom_abline(intercept = (lm.out2$coef[1]+lm.out2$coef[3]),
slope = lm.out2$coef[2],
color = "cyan2", linetype = "dashed", linewidth = 1) +
geom_abline(intercept = lm.out2$coef[1], slope = lm.out2$coef[2],
color = "salmon", linetype = "dashed", linewidth = 1) +
xlab("Math Score") + ylab("Reading Score")
---
title: "Homework 5 "
---
title: "Homework5 "
---
title: #Homework5
author: "Jenny"
---
title: Homework5
---
title: #Homework5
author:# Jenny
date: #Feb 9
output: openintro::lab_report
---
title: #Homework5
author:# Jenny
date: #Feb 9
output: #openintro::lab_report
---
title: #Homework5
author:# Jenny
date: #Feb 9
output: #openintro::lab_report
---
```{r load-packages, message=FALSE}
library(tidyverse)
library(openintro)
library(infer)
```
library(tidyverse)
library(openintro)
library(infer)
library(tidyverse)
library(openintro)
library(infer)
pnorm(75,77,9)
pnorm(130,100,15)
View(b1)
1 - pnorm(92, 77, 9)
p_85 <- pnorm(85, 77, 9)
p_95 <- pnorm(95, 77, 9)
p_85to95 <- p_95 - p_85
p_85to95
qnorm(0.98, 77, 9
qnorm(0.98, 77, 9)
qnorm(0.87, 77, 9)
library(tidyverse)
library(openintro)
library(infer)
library(stats)
(require(stats))
n <- 35
sample_mean <- 9 / sqrt(n)
sample mean is approximately 0.00735
(require(stats))
n <- 35
sample_mean <- 9 / sqrt(n)
sample mean
(require(stats))
n <- 35
sample_mean <- 9 / sqrt(n)
sample_mean
n <- 35
sample_mean <- 9 / sqrt(n)
sample_mean
(require(stats))
n <- 35
sample_mean <- 9 / sqrt(n)
sample_mean
n <- 35
sample_mean <- 9 / sqrt(n)
sample_mean
1- pnorm(78, 77, smaple_mean)
n <- 35
sample_mean <- 9 / sqrt(n)
1- pnorm(78, 77, smaple_mean)
n <- 35
sample_mean <- 9 / sqrt(n)
1- pnorm(78, 77, sample_mean)
pnorm(92,77,9)
qnorm(0.98, 77, 9)
p_85 <- pnorm(85, 77, 9)
p_95 <- pnorm(95, 77, 9)
p_85to95 <- p_95 - p_85
p_85to95
pnorm(75,77,9)
library(tidyverse)
library(openintro)
library(infer)
library(stats)
n <- 35
sample_mean <- 9 / sqrt(n)
1- rnorm(78, 77, sample_mean)
n <- 35
prob <- 1 - pnorm(78, 77, sample_mean)
n <- 35
prob <- 1 - pnorm(78, 77, sample_mean)
prob
n <- 35
prob <- 1 - pnorm(78, 77, sample_mean)
print(prob)
n <- 35
prob <- 1 - pnorm(78, 77, sample_mean)
n <- 35
prob <- 1 - pnorm(78, 77, sample_mean)
print(prob)
n <- 35
sample_mean <- 9 / sqrt(n)
answer1f <- 1- rnorm(78, 77, sample_mean)
answer1f
mean10s <-3*10.4
sd10s <- sqrt(3) * 0.25
mean30 <- 30.8
prob <- 1 - pnorm(30, mean10s, sd10s)
mean10s <-3*10.4
sd10s <- sqrt(3) * 0.25
mean30 <- 30.8
prob <- 1 - pnorm(30, mean10s, sd10s)
prob
mean10s <-3*10.4
sd10s <- sqrt(3) * 0.25
mean30 <- 30.8
prob <- 1 - pnorm(30, mean10s, sd10s)
prob
# Load the stats package
library(stats)
# Mean and standard deviation of the sum of three 10 lb. bags
mu_Y <- 3 * 10.4
sigma_Y <- sqrt(3) * 0.25
# Mean of the 30 lb. bag
mu_X <- 30.8
# Calculate the probability that the sum of three 10 lb. bags exceeds the weight of one 30 lb. bag
prob <- 1 - pnorm(30, mean = mu_Y, sd = sigma_Y)
# Print the result
prob
mean10s <-3*10.4
sd10s <- sqrt(3) * 0.25
mean30 <- 30.8
prob <- 1 - pnorm(30, mean10s, sd10s)
prob
lower.bound <- 1
upper.bound <- 7
x <-3
prob <- pnorm((x-lower.bound)/(upper.bound-lower.bound))
prob
lower.bound <- 1
upper.bound <- 7
x <-3
prob <- pnorm((x-lower.bound)/(upper.bound-lower.bound))
prob
lower_bound <- 1
upper_bound <- 7
x <- 3
prob <- pnorm((x - lower_bound)/(upper_bound - lower_bound))
prob
lower.bound <- 1
upper.bound <- 7
x <-3
prob <- pnorm((x-lower.bound)/(upper.bound-lower.bound))
prob
lower_bound <- 1
upper_bound <- 7
x <- 3
prob <- (x - lower_bound)/(upper_bound - lower_bound)
prob
lower.bound <- 1
upper.bound <- 7
x <-3
prob <- (x-lower.bound)/(upper.bound-lower.bound)
prob
lower.bound <- 1
upper.bound <- 7
x1 <- 1
x2 <-5
prob <- (x2 - x1)/(upper_bound - lower_bound)
prob
lower_bound <- 1
upper_bound <- 7
x <- 7
prob <- (x - lower_bound)/(upper_bound - lower_bound)
prob
ZOD <- read_csv("ZODTwoGroups.csv")
ZOD$Pie <- factor(ZOD$Pie)
View(ZOD)
ZOD <- read_csv("ZODTwoGroups.csv")
ZOD$Pie <- factor(ZOD$Pie)
spec(ZOD)
ggplot(ZOD, aes(x=Pie, y=ZOD)) +
geom_boxplot() + xlab("Pie") +
ylab("Zone Out Duration (minutes)")
set.seed(10)
PermsOut <- ZOD %>%
# added call to rep_sample_n
rep_sample_n(size = nrow(ZOD), reps = 1000, replace = FALSE) %>%
mutate(ZOD_perm = sample(ZOD)) %>%
# added replicate to group_by
group_by(replicate, Pie) %>%
summarize(mean_ZOD_perm = mean(ZOD_perm), mean_ZOD = mean(ZOD)) %>%
summarize(diff_perm = diff(mean_ZOD_perm), diff_orig = diff(mean_ZOD)) # Cherry - Apple
PermsOut
---
title: #Homework5
author:# Jenny
date: #Feb 9
output: #openintro::lab_report
---
```{r load-packages, message=FALSE}
ggplot(ZOD, aes(x=Pie, y=ZOD)) +
geom_boxplot() + xlab("Pie") +
ylab("Zone Out Duration (minutes)")
ZOD <- read.csv("ZODTwoGroups.csv")
ZOD$Pie <- factor(ZOD$Pie)
ggplot(ZOD, aes(x=Pie, y=ZOD)) +
geom_boxplot() + xlab("Pie") +
ylab("Zone Out Duration (minutes)")
library(tidyverse)
library(openintro)
library(infer)
library(tidyverse)
library(openintro)
library(infer)
installs.packages("ggplot2")
library(tidyverse)
library(openintro)
library(infer)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(tidyverse)
library(openintro)
library(infer)
devtools::install_github("tidyverse/ggplot2")
ggplot(ZOD, aes(x=Pie, y=ZOD)) +
geom_boxplot() + xlab("Pie") +
ylab("Zone Out Duration (minutes)")
a<- ggplot(ZOD, aes(x=Pie, y=ZOD)) +
geom_boxplot() + xlab("Pie") +
ylab("Zone Out Duration (minutes)")
summarize(a)
ggplot(ZOD, aes(x=Pie, y=ZOD)) +
geom_boxplot() + xlab("Pie") +
ylab("Zone Out Duration (minutes)")
set.seed(10)
PermsOut <- ZOD %>%
# added call to rep_sample_n
rep_sample_n(size = nrow(ZOD), reps = 1000, replace = FALSE) %>%
mutate(ZOD_perm = sample(ZOD)) %>%
# added replicate to group_by
group_by(replicate, Pie) %>%
summarize(mean_ZOD_perm = mean(ZOD_perm), mean_ZOD = mean(ZOD)) %>%
summarize(diff_perm = diff(mean_ZOD_perm), diff_orig = diff(mean_ZOD)) # Cherry - Apple
PermsOut
origdiff <- PermsOut$diff_orig[1]
ggplot(data = PermsOut, aes(x = diff_perm)) +
geom_histogram(bins = 13) + xlab("xbar(Cherry - Apple)") +
geom_vline(xintercept = origdiff, col="Red")
PermsOut %>%
summarize(count = sum(diff_orig <= diff_perm),
proportion = mean(diff_orig <= diff_perm))
WL <- read_csv("PopularDietsCombined.csv")
WL$Diet <- factor(WL$Diet)
WL <- read.csv("PopularDietsCombined.csv")
WL$Diet <- factor(WL$Diet)
ggplot(ZOD, aes(x=Pie, y=ZOD)) +
geom_boxplot() + xlab("Pie") +
ylab("Zone Out Duration (minutes)")
WL <- read_csv("PopularDietsCombined.csv")
WL$Diet <- factor(WL$Diet)
ggplot(WL, aes(x=Diet, y=WtLossKG)) +
geom_boxplot() + labs(x="Diet Type", y="Weight Loss (kg)")
wt_loss_mean <- mean(WtLossKG)
wt_loss_mean <- mean(WtLossKG))
wt_loss_mean <- mean(WtLossKG)
wt_loss_mean <- mean(WL$WtLossKG)
wt_loss_mean
set.seed(10)
# 1000 bootstrap samples so we can display the distribution
BootSamp1000 <- WL %>%  specify(response = WtLossKG) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
# Make a histogram of the bootstrap distribution
ggplot(data = BootSamp1000, aes(x = stat )) +
geom_histogram(bins = 10, colour = 1, fill = "white") +
xlab("xbar")
wt_loss_mean <- mean(WL$WtLossKG)
wt_loss_mean
set.seed(10)
# 1000 bootstrap samples so we can display the distribution
WL %>%  specify(response = WtLossKG) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean") %>%
get_ci(level = 0.95)
set.seed(10)
WL %>%  specify(response = WtLossKG) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean") %>%
get_ci(level = 0.90)
WL %>%  specify(response = WtLossKG) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean") %>%
get_ci(level = 0.99)
a <- group_by(CheckoutType)
a <- unique(CheckoutType)
library("dplyr")
library("tidyverse")
library("ggplot2")
library("plotly")
library("rsconnect")
library("shiny")
library("reshape2")
library("highcharter")
# loading dataset
book_data <- read.csv("library_data.csv")
setwd("~/Documents/info_201/assignments/ps06-web")
library("dplyr")
library("tidyverse")
library("ggplot2")
library("plotly")
library("rsconnect")
library("shiny")
library("reshape2")
library("highcharter")
# loading dataset
book_data <- read.csv("library_data.csv")
first_page <- tabPanel(
"Introduction",
h1(strong("Analyzing book checkouts in Seattle library")),
img("", src = "https://static01.nyt.com/images/2022/01/16/fashion/VIRAL-LIBRARY/VIRAL-LIBRARY-jumbo.jpg?quality=75&auto=webp",
width = "600", height = "300", align = "center"),
p("This dataset includes a monthly count of Seattle Public Library checkouts by title for physical and electronic items.
The dataset begins with checkouts that occurred in April 2005."),
p("The dataset contains 100000 variables 12 variables")
)
second_page <- tabPanel(
"Book checkouts by year",
h1(strong("Checkouts by year")),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "CheckoutYear",label = "Select Year:",
choices = sort(unique(book_data$CheckoutYear)), selected = NULL
),
sliderInput(
inputId = ".", label = "Select month:",
min = 1, max = 12, value = c(1, 12)
),
),
mainPanel(
plotlyOutput("chart"),
hr(),
h3(strong("Checkouts result by year")),
)
)
)
#third page:
third_page <-  tabPanel(
"Book checkouts by year",
h1(strong("Checkouts by year")),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "CheckoutYear",label = "Select Year:",
choices = sort(unique(book_data$CheckoutYear)), selected = NULL
),
selectInput(
inputId = "UsageClass",
label = "Select usage class:",
choices = sort(unique(book_data$UsageClass)),
selected = NULL
),
checkboxGroupInput(
inputId = "type",
label = "Select type:",
choices = c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December"),
selected = c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
)
),
mainPanel(
plotlyOutput("chart2"),
hr(),
h3(strong("Checkouts result by year")),
)
)
)
a <- unique(CheckoutType)
a <- unique(book_data$CheckoutType)
a
unique(book_data$CheckoutType)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
